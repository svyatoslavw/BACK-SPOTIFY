generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  password String
  name     String @unique
  image    String @default("/uploads/default_avatar.png")

  login     String     @unique
  gender    String?
  country   String
  //isPremium Boolean @default(false)
  role      UserRole   @default(USER)
  tracks    Track[]
  albums    Album[]
  favorites Favorite[]
  playlist  Playlist[]

  premiumId Int?
  premium   Premium? @relation(fields: [premiumId], references: [id])
  Order     Order[]
}

model Favorite {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  playlistId Int
  user       User     @relation(fields: [userId], references: [id])
  playlist   Playlist @relation(fields: [playlistId], references: [id])
}

model Track {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  releaseDate DateTime
  name        String
  image       String
  file        String

  artistId Int  @map("artist_id")
  artist   User @relation(fields: [artistId], references: [id])

  albumId Int?   @map("album_id")
  album   Album? @relation(fields: [albumId], references: [id])

  playlists Playlist[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")
}

model Album {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  releaseDate DateTime
  name        String
  image       String

  tracks Track[]

  artistId Int  @map("artist_id")
  artist   User @relation(fields: [artistId], references: [id])

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")
}

model Playlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String
  slug  String @unique
  image String

  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  tracks    Track[]
  favorites Favorite[]
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name   String  @unique
  slug   String  @unique
  tracks Track[]
  albums Album[]
}

model Premium {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")
  expiration DateTime?
  price      Decimal         @default(0) @db.Decimal(10, 2)
  image      String          @default("/uploads/icon.png")
  type       EnumUserPremium

  users User[]
  Order Order[]
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  price  Decimal         @default(0) @db.Decimal(10, 2)
  status EnumOrderStatus @default(PENDING)

  itemId Int?     @map("product_id")
  item   Premium? @relation(fields: [itemId], references: [id])

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}

enum EnumUserPremium {
  NONEPREMIUM
  INDIVIDUAL
  STUDENT
  DUO
  FAMILY
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  SUPPORT
  DEVELOPER
}
