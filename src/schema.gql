# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Playlist {
  id: Int!
  createdAt: String!
  slug: String!
  name: String!
  image: String!
  tracks: [Track!]
  userId: Float!
  user: User
}

type Favorite {
  id: Int!
  createdAt: String!
  userId: Int!
  playlistId: Int!
  user: User!
  playlist: Playlist!
}

type Premium {
  id: Int!
  createdAt: String!
  expiration: String
  price: String!
  type: EnumUserPremium!
  image: String!
  userId: Float!
  user: User!
}

enum EnumUserPremium {
  NONEPREMIUM
  INDIVIDUAL
  STUDENT
  DUO
  FAMILY
}

type User {
  id: Int!
  createdAt: String!
  email: String!
  password: String!
  name: String!
  image: String!
  country: String
  login: String!
  favorites: [Favorite!]
  likedTracks: [Track!]
  tracks: [Track!]
  role: UserRole!
  premium: Premium
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  ARTIST
  DEVELOPER
}

type Track {
  id: Int!
  createdAt: String!
  releaseDate: String!
  file: String!
  name: String!
  slug: String!
  image: String!
  artistId: Int!
  artist: User!
  album: String!
  albumId: [Album!]!
  category: Category!
  categoryId: Int!
}

type Category {
  exampleField: Int!
  createdAt: String!
  name: String!
  slug: String!
  tracks: [Track!]!
  albums: [Album!]!
}

type Album {
  id: Int!
  createdAt: String!
  releaseDate: String!
  name: String!
  image: String!
  tracks: [Track!]!
  category: Category!
  categoryId: Int!
}

type AuthResponse {
  user: User!
  accessToken: String!
  refreshToken: String!
}

type MediaResponse {
  url: String!
  name: String!
}

type PremiumResponse {
  url: String!
}

type SearchResult {
  tracks: [Track!]!
  albums: [Album!]!
}

type StatisticsResponse {
  name: String!
  value: Float
}

type Query {
  getAllUsers: [User!]!
  getProfile(id: Float!): User!
  getProfileByToken: User!
  getAllTracks(query: SearchInput!): [Track!]!
  getHomeTracks: [Track!]!
  getTrackById(id: Float!): Track!
  getTrackBySlug(slug: String!): Track!
  getAllAlbum: [Album!]!
  getAllPlaylist: [Playlist!]!
  getPlaylistById(id: String!): Playlist!
  getPlaylistBySlug(slug: String!): Playlist!
  getSearchQuery(query: SearchInput!): SearchResult!
  getMainStatistics: [StatisticsResponse!]!
  getAllCategory: [Category!]!
  getCategoryById(id: Int!): Category!
}

input SearchInput {
  searchTerm: String
  categoryId: String
}

type Mutation {
  updateProfile(id: Float!, dto: UserDto!): User!
  toggleFavorite(playlistId: String!, id: Float!): User!
  toggleFavoriteTrack(id: Float!, trackId: Float!): User!
  deleteProfile(id: Float!): User!
  register(registerInput: AuthDto!): AuthResponse!
  login(loginInput: AuthDto!): AuthResponse!
  getNewTokens(refreshToken: String!): AuthResponse!
  createTrack(id: Float!, dto: TrackDto!): Track!
  addToPlaylist(id: Float!, trackId: Float!): Playlist!
  createPlaylist(id: Float!): Playlist!
  updatePlaylist(id: Float!, dto: UpdatePlaylistDto!): Playlist
  deletePlaylist(id: Float!, playlistId: Float!): String
  uploadMediaFile(file: Upload): MediaResponse!
  createPayment(type: String!, id: Float!): PremiumResponse!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  deleteCategory(id: Int!): Category!
}

input UserDto {
  email: String
  password: String
  name: String
  image: String
}

input AuthDto {
  email: String!
  name: String
  password: String!
}

input TrackDto {
  name: String!
  image: String!
  file: String!
}

input UpdatePlaylistDto {
  name: String
  image: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateCategoryInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateCategoryInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}